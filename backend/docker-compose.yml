version: '3.8'

services:
  # --- Infrastructure ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rideverse-net
    healthcheck:
      test: ["CMD", "nc", "-z", "zookeeper", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"  # Added to ensure internal access works
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - rideverse-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --notify-keyspace-events Ex
    networks:
      - rideverse-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8001:8081"       # Exposes the web UI on host port 8081
    environment:
      - REDIS_HOSTS=local:redis:6379  # name:host:port
    depends_on:
      - redis
    networks:
      - rideverse-net

  mongo:
    image: mongo:6.0
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - rideverse-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- GUI Tools ---
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-new  # Renamed to avoid conflict
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - rideverse-net

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - rideverse-net

  # --- Application Services ---
  ride-service:
    build:
      context: ./ride-service
      dockerfile: Dockerfile
    container_name: ride-service
    ports:
      - "3000:3000"
    environment:
      RIDE_SERVICE_MONGODB_URI: mongodb://mongo:27017/ride_service
      DRIVER_SERVICE_URL: http://driver-service:3001
      NOTIFICATION_SERVICE_URL: http://notification-service:3002
      USER_SERVICE_URL: http://user-service:3006
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      RIDE_SERVICE_PORT: 3000
      # Fix node-fetch issue by enabling experimental features:
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - redis
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./ride-service:/usr/src/app
      

  driver-service:
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    container_name: driver-service
    ports:
      - "3001:3001"
    environment:
      DRIVER_SERVICE_MONGODB_URI: mongodb://mongo:27017/driver_service
      RIDE_SERVICE_URL: http://ride-service:3000
      NOTIFICATION_SERVICE_URL: http://notification-service:3002
      USER_SERVICE_URL: http://user-service:3006
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      DRIVER_SERVICE_PORT: 3001
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - redis
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./driver-service:/usr/src/app
     # - /usr/src/app/node_modules

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "3002:3002"
    environment:
      NOTIFICATION_SERVICE_MONGODB_URI: mongodb://mongo:27017/notification_service
      RIDE_SERVICE_URL: http://ride-service:3000
      DRIVER_SERVICE_URL: http://driver-service:3001
      USER_SERVICE_URL: http://user-service:3006
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      NOTIFICATION_SERVICE_PORT: 3002
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - redis
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./notification-service:/usr/src/app
      - /usr/src/app/node_modules

  location-service:
    build:
      context: ./location-service
      dockerfile: Dockerfile
    container_name: location-service
    ports:
      - "3003:3003"
    environment:
      LOCATION_SERVICE_MONGODB_URI: mongodb://mongo:27017/location_service
      DRIVER_SERVICE_MONGODB_URI: mongodb://mongo:27017/driver_service
      REDIS_URL: redis://redis:6379
      LOCATION_SERVICE_PORT: 3003
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - redis
    networks:
      - rideverse-net
    volumes:
      - ./location-service:/usr/src/app
      - /usr/src/app/node_modules

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "3004:3004"
    environment:
      PAYMENT_SERVICE_MONGODB_URI: mongodb://mongo:27017/payment_service
      KAFKA_BROKERS: kafka:9092
      PAYMENT_SERVICE_PORT: 3004
      STRIPE_SECRET_KEY: sk_test_YOUR_STRIPE_SECRET_KEY
      NODE_OPTIONS: --experimental-modules
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - rideverse-net
    volumes:
      - ./payment-service:/usr/src/app
      - /usr/src/app/node_modules

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "3006:3006"
    environment:
      USER_SERVICE_MONGODB_URI: mongodb://mongo:27017/user_service
      KAFKA_BROKERS: kafka:9092
      USER_SERVICE_PORT: 3006
      JWT_SECRET: YourSuperSecretKeyForJWT
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./user-service:/usr/src/app
      - /usr/src/app/node_modules

  support-service:
    build:
      context: ./support-service
      dockerfile: Dockerfile
    container_name: support-service
    ports:
      - "3007:3007"
    environment:
      SUPPORT_SERVICE_MONGODB_URI: mongodb://mongo:27017/support_service
      NOTIFICATION_SERVICE_URL: http://notification-service:3002
      KAFKA_BROKERS: kafka:9092
      SUPPORT_SERVICE_PORT: 3007
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./support-service:/usr/src/app
      - /usr/src/app/node_modules

  admin-service:
    build:
      context: ./admin-service
      dockerfile: Dockerfile
    container_name: admin-service
    ports:
      - "3009:3009"
    environment:
      ADMIN_SERVICE_MONGODB_URI: mongodb://mongo:27017/admin_service
      RIDE_SERVICE_URL: http://ride-service:3000
      DRIVER_SERVICE_URL: http://driver-service:3001
      USER_SERVICE_URL: http://user-service:3006
      PAYMENT_SERVICE_URL: http://payment-service:3004
      SUPPORT_SERVICE_URL: http://support-service:3007
      NOTIFICATION_SERVICE_URL: http://notification-service:3002
      KAFKA_BROKERS: kafka:9092
      ADMIN_SERVICE_PORT: 3009
      JWT_SECRET: YourSuperSecretKeyForJWT
      ADMIN_DEFAULT_USER: admin
      ADMIN_DEFAULT_PASSWORD: password
      NODE_OPTIONS: --experimental-modules
    depends_on:
      - mongo
      - kafka
    networks:
      - rideverse-net
    volumes:
      - ./admin-service:/usr/src/app
      - /usr/src/app/node_modules

  admin-portal:
    build:
      context: ./admin-portal
      dockerfile: Dockerfile
    container_name: admin-portal
    ports:
      - "5173:5173"
    environment:
      #VITE_ADMIN_SERVICE_URL: http://localhost:3009
      REACT_APP_ADMIN_SERVICE_URL: http://admin-service:3009
      PORT: 5173
    depends_on:
      - admin-service
    networks:
      - rideverse-net
    volumes:
      - ./admin-portal:/app
      #- /app/node_modules

networks:
  rideverse-net:
    driver: bridge

volumes:
  mongo-data:
